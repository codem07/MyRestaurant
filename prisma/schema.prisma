
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  password              String
  firstName             String   @map("first_name")
  lastName              String   @map("last_name")
  role                  String   @default("owner")
  subscriptionPlan      String   @default("free") @map("subscription_plan")
  subscriptionStatus    String   @default("active") @map("subscription_status")
  subscriptionExpiresAt DateTime? @map("subscription_expires_at")
  restaurantName        String?  @map("restaurant_name")
  restaurantAddress     String?  @map("restaurant_address")
  phone                 String?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  recipes       Recipe[]
  inventory     Inventory[]
  tables        Table[]
  orders        Order[]
  reservations  Reservation[]
  suppliers     Supplier[]
  restockOrders RestockOrder[]

  @@map("users")
}

model Recipe {
  id               String  @id @default(cuid())
  userId           String  @map("user_id")
  name             String
  description      String?
  category         String?
  prepTime         Int?    @map("prep_time")
  cookTime         Int?    @map("cook_time")
  servings         Int?
  difficulty       String?
  costPerServing   Float?  @map("cost_per_serving")
  imageUrl         String? @map("image_url")
  instructions     Json?
  ingredients      Json?
  nutritionalInfo  Json?   @map("nutritional_info")
  tags             Json?
  isActive         Boolean @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recipes")
}

model Inventory {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  name            String
  category        String?
  currentStock    Float     @map("current_stock")
  unit            String
  minStock        Float     @default(0) @map("min_stock")
  costPerUnit     Float?    @map("cost_per_unit")
  supplier        String?
  supplierContact String?   @map("supplier_contact")
  lastRestocked   DateTime? @map("last_restocked")
  expiryDate      DateTime? @map("expiry_date")
  location        String?
  notes           String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Table {
  id          String  @id @default(cuid())
  userId      String  @map("user_id")
  tableNumber Int     @map("table_number")
  capacity    Int
  status      String  @default("available")
  location    String?
  xPosition   Float   @default(0) @map("x_position")
  yPosition   Float   @default(0) @map("y_position")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]
  reservations Reservation[]

  @@unique([userId, tableNumber])
  @@map("tables")
}

model Order {
  id                   String    @id @default(cuid())
  userId               String    @map("user_id")
  tableId              String?   @map("table_id")
  customerName         String?   @map("customer_name")
  customerPhone        String?   @map("customer_phone")
  status               String    @default("pending")
  orderType            String    @default("dine-in") @map("order_type")
  subtotal             Float
  tax                  Float     @default(0)
  tip                  Float     @default(0)
  total                Float
  items                Json
  specialInstructions  String?   @map("special_instructions")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  table Table? @relation(fields: [tableId], references: [id], onDelete: SetNull)

  @@map("orders")
}

model Reservation {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  tableId          String?  @map("table_id")
  customerName     String   @map("customer_name")
  customerPhone    String?  @map("customer_phone")
  customerEmail    String?  @map("customer_email")
  partySize        Int      @map("party_size")
  reservationDate  DateTime @map("reservation_date")
  durationMinutes  Int      @default(120) @map("duration_minutes")
  status           String   @default("confirmed")
  specialRequests  String?  @map("special_requests")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  table Table? @relation(fields: [tableId], references: [id], onDelete: SetNull)

  @@map("reservations")
}

model Supplier {
  id               String  @id @default(cuid())
  userId           String  @map("user_id")
  name             String
  contactPerson    String? @map("contact_person")
  email            String?
  phone            String?
  address          String?
  paymentTerms     String? @map("payment_terms")
  deliverySchedule String? @map("delivery_schedule")
  notes            String?
  isActive         Boolean @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  restockOrders RestockOrder[]

  @@map("suppliers")
}

model RestockOrder {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  supplierId       String?   @map("supplier_id")
  status           String    @default("pending")
  orderDate        DateTime  @default(now()) @map("order_date")
  expectedDelivery DateTime? @map("expected_delivery")
  totalAmount      Float?    @map("total_amount")
  items            Json?
  notes            String?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  supplier Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  @@map("restock_orders")
}
